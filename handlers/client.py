from aiogram import Dispatcher, types
from create_bot import dp, bot
from keyboards import kb_client
from aiogram.types import ReplyKeyboardRemove
from data_base import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
from aiogram.dispatcher import FSMContext #–±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import State, StatesGroup

 #State - –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class FSMAdmin(StatesGroup):
    name = State() #State - –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    lastname = State()
    id_user = State()
    # staff_name = State()
#–≥–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
# @dp.message_handler(commands=['start','help'])
async def commands_start(message : types.Message):
    try:#–ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –õ–°, —è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,{0.first_name} üëãüèª \r\n'
                     '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã TS –≤ —Ç—Ä–∏ –∫–ª–∏–∫–∞.\r\n'
                     '–ê –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–ª—É—à–∞–µ–º—Å—è –∫ —Ç–µ–±–µ –∏ –±—É–¥–µ–º –ª—É—á—à–µ –≤ –±—É–¥—É—â–µ–º ‚ù§Ô∏è'.format(message.from_user),
                     parse_mode='html', reply_markup=kb_client) #reply_markup-–ø–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤—É
        # await message.delete() #—à–æ—Ç–æ —É–¥–∞–ª—è–µ—Ç
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttps://t.me/Technical_SupportLC_Bot')

#–≤—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞
# @dp.message_handler(commands=['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É'])
# async def pizza_open_command(message : types.Message):
#     await bot.send_message(message.from_user.id,'–≤—Å-—á—Ç,–ø—Ç-–ø–Ω')

#—Ç—Ä–µ—Ç—å—è –∫–æ–º–∞–Ω–¥–∞
# @dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
# async def pizza_place_command(message : types.Message):
#     await bot.send_message(message.from_user.id,'–¥–æ–±—Ä–æ–ª—é–±–æ–≤–∞') #reply_markup=ReplyKeyboardRemove()-–∫–ª–∞–≤–∞ —É–¥–∞–ª—è–µ—Ç—Å—è+–Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å one_time_keyboard=True –∏–∑ kb




# @dp.message_handler(state=FSMAdmin.staff_name) 
# async def set_staff_name(message: types.Message, state: FSMContext):
#     async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#         data['staff_name'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
#     await sqlite_db.sql_add_note_command(state)
#     await state.finish()
#     await message.reply('–°–ø–∞—Å–∏–±–æ!\r\n'
#                         '–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ ‚ù§ ')

# @dp.message_handler(state=FSMAdmin.department) 
# async def set_department(message: types.Message, state: FSMContext):
#     async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#         data['department'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ
#     await FSMAdmin.next()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
#     await message.reply('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!\r\n'
#         '\r\n'
#         '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')

# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_department '))
# async def set_department(callback_query: types.CallbackQuery):
#     # global id_staff
#     read = await sqlite_db.sql_read_department()
#     keyboard = types.InlineKeyboardMarkup()
#     for ret in read:
#         keyboard.add(types.InlineKeyboardButton( f'{ret[-1]}', callback_data = f'set_department {ret[-1]}'))
#     await bot.send_message(callback_query.from_user.id,text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –æ—Ç–¥–µ–ª:', reply_markup=keyboard)


#–≤—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_note '))#–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'del '
async def set_note(callback_query: types.CallbackQuery, state: FSMContext):#callback_query-–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    note_result = re.search(r'\d', callback_query.data)
    note = note_result.group(0)
    last_name = callback_query.data.replace(f"set_note {note} ", "")
    id_user = callback_query.from_user.id
    # await FSMAdmin.name.set()
    async with state.proxy() as data:
        data['lastname'] = last_name
        data['note'] = note
        data['id_user'] = id_user
    await bot.send_message(callback_query.from_user.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!')
    # await set_department(callback_query)    
    await sqlite_db.sql_add_note_command(state)
    await state.finish()
    # await FSMAdmin.next()
    # await message.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\r\n'
    #     '\r\n' 
    #     '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ.')
    # await state.finish()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_staff '))#–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'del '
async def set_staff(callback_query: types.CallbackQuery):#callback_query-–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        keyboard = types.InlineKeyboardMarkup()
        for i in range(1,4):
            keyboard.add(types.InlineKeyboardButton(f'{i}', callback_data=f'set_note {i} {callback_query.data.replace("set_staff ", "")}'))
        await bot.send_message(callback_query.from_user.id, text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {callback_query.data.replace("set_staff ", "")} –≤—ã–±—Ä–∞–Ω.\n'
        '\r\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 3, –≥–¥–µ:\r\n'
        '\r\n'
        '1 - –æ—Ü–µ–Ω—é —Ä–∞–±–æ—Ç—É –Ω–∏–∂–µ –æ–∂–∏–¥–∞–Ω–∏–π\r\n'
        '2 - –æ—Ü–µ–Ω—é —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–º–∫–∞—Ö –æ–∂–∏–¥–∞–Ω–∏–π\r\n'
        '3 - –æ—Ü–µ–Ω—é —Ä–∞–±–æ—Ç—É –≤ –≤—ã—à–µ –æ–∂–∏–¥–∞–Ω–∏–π', reply_markup=keyboard)#–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω


@dp.message_handler(commands='–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É')
async def checkstaff(message: types.Message):
    # global id_staff
    read = await sqlite_db.sql_read2()
    keyboard = types.InlineKeyboardMarkup()
    for ret in read:
        keyboard.add(types.InlineKeyboardButton( f'{ret[0]} {ret[-1]}', callback_data = f'set_staff {ret[1]}'))
        # id_staff = f'{ret[-1]}'
    await bot.send_message(message.from_user.id,text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=keyboard)    
# async def delete_item(message:types.Message):
#     if message.from_user.id == ID:
#         read = await sqlite_db.sql_read2()#—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (sqlite_db)
#         for ret in read:#–ø–æ –ø–æ–ª—É—á–∏–≤—à–µ–º—É—Å—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ö–æ–¥–∏–º
#             # await bot.send_message(message.from_user.id, f'{ret[0]}\n–ò–º—è: {ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
#             await bot.send_message(message.from_user.id, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫', reply_markup=InlineKeyboardMarkup().\
#                 # add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))#–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ callback_data –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–¥ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
#                  add(InlineKeyboardButton( f'{ret[0]} {ret[-1]}', callback_data=f'del {ret[1]}')))        


# other.register_handlers_other(dp)
   #–ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê –ù–ê –ö–û–ù–ö–†–ï–¢–ù–û–ï –°–ú–°
    #  if message.text == '–ü—Ä–∏–≤–µ—Ç':
    #      await message.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!')

    #await message.answer(message.text)#await-–ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    #await message.reply(message.text)#"–æ—Ç–≤–µ—Ç–∏—Ç—å" –Ω–∞ —Å–º—Å
    # await bot.send_message(message.from_user.id,message.text )#"–æ—Ç–≤–µ—Ç–∏—Ç—å" –≤ –ª—Å

#–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ Technical_SupportLC_Bot
def register_handlers_client(dp : Dispatcher):
    #—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    dp.register_message_handler(commands_start, commands=['start','help'])
    # dp.register_message_handler(pizza_open_command, commands=['–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É'])
    # dp.register_message_handler(pizza_place_command, commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
    # dp.register_message_handler(checkstaff, commands=['–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É'])