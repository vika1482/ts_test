from email.mime import message
from glob import glob
from aiogram import Dispatcher, types
from pytz import common_timezones
from create_bot import dp, bot
from keyboards import kb_client
from aiogram.types import ReplyKeyboardRemove
from data_base import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
from aiogram.dispatcher import FSMContext #–±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import State, StatesGroup

global people_dict
people_dict = {}



class FSMclient(StatesGroup):
    write = State() #State - –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    name = State()
    lastname = State()
    comment = State()


#–≥–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start','help']) 
async def commands_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,{0.first_name} üëãüèª \r\n'
                     '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã TS –≤ —Ç—Ä–∏ –∫–ª–∏–∫–∞.\r\n'
                     '–ê –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–ª—É—à–∞–µ–º—Å—è –∫ —Ç–µ–±–µ –∏ –±—É–¥–µ–º –ª—É—á—à–µ –≤ –±—É–¥—É—â–µ–º ‚ù§Ô∏è'.format(message.from_user),
                     parse_mode='html', reply_markup=kb_client) #reply_markup-–ø–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤—É
        # await message.delete() #—à–æ—Ç–æ —É–¥–∞–ª—è–µ—Ç
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttps://t.me/Technical_SupportLC_Bot')


@dp.message_handler(commands='–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É')
async def checkstaff(message: types.Message):
    read = await sqlite_db.sql_read_users_ts_command()
    keyboard = types.InlineKeyboardMarkup()
    for ret in read:
        keyboard.add(types.InlineKeyboardButton( f'{ret[1]} {ret[2]}', callback_data = f'set_staff {ret[2]}'))
    # await message.date
    await bot.send_message(message.from_user.id,text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=keyboard)  


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_staff '))
async def set_staff(callback_query: types.CallbackQuery):
        keyboard = types.InlineKeyboardMarkup()
        for i in range(1,6):
            keyboard.add(types.InlineKeyboardButton(f'{i}', callback_data=f'set_note {i} {callback_query.data.replace("set_staff ", "")}'))
        await bot.send_message(callback_query.from_user.id, text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {callback_query.data.replace("set_staff ", "")} –≤—ã–±—Ä–∞–Ω.\n'
        '\r\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\r\n'
        '\r\n'
        '1 - –æ—Ü–µ–Ω–∏–≤–∞—é —Ä–∞–±–æ—Ç—É –Ω–∏–∂–µ –æ–∂–∏–¥–∞–Ω–∏–π\r\n'
        '5 - –æ—Ü–µ–Ω–∏–≤–∞—é —Ä–∞–±–æ—Ç—É –≤—ã—à–µ –æ–∂–∏–¥–∞–Ω–∏–π', reply_markup=keyboard)


#–≤—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_note '))#–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'set_note '
async def set_note(callback_query: types.CallbackQuery, state: FSMclient):#callback_query-–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    #await bot.send_message(callback_query.from_user.id, text="–Ø —Ä–∞–±–æ—Ç–∞—é")
    note_result = re.search(r'\d', callback_query.data)
    note = note_result.group(0)
    last_name = callback_query.data.replace(f"set_note {note} ", "")
    # id_user = callback_query.from_user.id
    # await FSMAdmin.name.set()
    async with state.proxy() as data:
        data['note'] = note
        data['id_note'] = await sqlite_db.sql_add_note_command(note)
        data['id_recipient'] = await sqlite_db.sql_get_id_by_lastname(last_name)#–ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        await sqlite_db.sql_add_note_recipient_command(data)
        # await bot.send_message(callback_query.from_user.id, text = '–û–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:') # –≤—ã–∑–æ–≤ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ—ã –æ –∫–ª–∏–µ–Ω—Ç–µ
        # await FSMcomment.comment.set()

        await bot.send_message(callback_query.from_user.id, text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:') # –≤—ã–∑–æ–≤ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ—ã –æ –∫–ª–∏–µ–Ω—Ç–µ
        #await state.finish()
        await select_department(callback_query)
  
@dp.message_handler(state=FSMclient.comment)
async def set_comment(message: types.Message, state: FSMclient):
    comment = message.text
    async with state.proxy() as data:
        await sqlite_db.sql_add_comment_note_command(comment, data['id_note'])
    await message.answer(text = f'–ó–∞–ø–∏—Å–∞–Ω–æ: {comment}')
    await state.finish()
  

#–≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
async def select_department(callback_query: types.CallbackQuery):
    #await FSMclient.department.set()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
    read = await sqlite_db.sql_read_department()
    keyboard = types.InlineKeyboardMarkup()
    for ret in read:
        if ret[1] != '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
            keyboard.add(types.InlineKeyboardButton( f'{ret[1]}', callback_data = f'set_department {ret[0]}'))
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –æ—Ç–¥–µ–ª:', reply_markup=keyboard)
    # await FSMclient.name.set()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_department ')) 
async def set_department(callback_query: types.CallbackQuery, state: FSMclient):
    global id_department
    id_department = callback_query.data.replace("set_department ", "")
    await bot.send_message(callback_query.from_user.id, text=f'–Ø —Ä–∞–±–æ—Ç–∞—é –≤ {id_department}')
    await FSMclient.name.set()
    await bot.send_message(callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è:')

@dp.message_handler(state=FSMclient.name)
async def set_name(message: types.Message, state: FSMclient):
    global name
    name = message.text
    await FSMclient.lastname.set()
    await message.answer(text = '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:')

@dp.message_handler(state=FSMclient.lastname)
async def set_lastname(message: types.Message, state: FSMclient):
    global lastname, id_department, name, id_author
    lastname = message.text
    # await message.answer(text = f'–ó–∞–ø–∏—Å–∞–Ω–æ: {id_department, name, lastname}')
    await sqlite_db.sql_add_all_users_command(name, lastname, id_department, message)
    id_author = await sqlite_db.sql_get_id_by_lastname(lastname)

    async with state.proxy() as data:
        data['id_author'] = await sqlite_db.sql_get_id_by_lastname(lastname)
        await sqlite_db.sql_add_note_author_command(data)

    async with state.proxy() as data:
        if int(data['note']) < 5:
            await message.answer(text="–ü–æ—á–µ–º—É –Ω–µ 5?")
            await FSMclient.comment.set()
        else:
            await state.finish()














    # @dp.message_handler(state=FSMAdmin.department) 
# async def set_department(message: types.Message, state: FSMContext):
#     async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#         data['department'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ
#     await FSMAdmin.next()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
#     await message.reply('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!\r\n'
#         '\r\n'
#         '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')






#–≤—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞
# @dp.message_handler(commands=['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É'])
# async def pizza_open_command(message : types.Message):
#     await bot.send_message(message.from_user.id,'–≤—Å-—á—Ç,–ø—Ç-–ø–Ω')

#—Ç—Ä–µ—Ç—å—è –∫–æ–º–∞–Ω–¥–∞
# @dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
# async def pizza_place_command(message : types.Message):
#     await bot.send_message(message.from_user.id,'–¥–æ–±—Ä–æ–ª—é–±–æ–≤–∞') #reply_markup=ReplyKeyboardRemove()-–∫–ª–∞–≤–∞ —É–¥–∞–ª—è–µ—Ç—Å—è+–Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å one_time_keyboard=True –∏–∑ kb

# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('set_department '))
# async def set_department(callback_query: types.CallbackQuery):
#     # global id_staff
#     read = await sqlite_db.sql_read_department()
#     keyboard = types.InlineKeyboardMarkup()
#     for ret in read:
#         keyboard.add(types.InlineKeyboardButton( f'{ret[-1]}', callback_data = f'set_department {ret[-1]}'))
#     await bot.send_message(callback_query.from_user.id,text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –æ—Ç–¥–µ–ª:', reply_markup=keyboard)
  
# async def delete_item(message:types.Message):
#     if message.from_user.id == ID:
#         read = await sqlite_db.sql_read2()#—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (sqlite_db)
#         for ret in read:#–ø–æ –ø–æ–ª—É—á–∏–≤—à–µ–º—É—Å—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ö–æ–¥–∏–º
#             # await bot.send_message(message.from_user.id, f'{ret[0]}\n–ò–º—è: {ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
#             await bot.send_message(message.from_user.id, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫', reply_markup=InlineKeyboardMarkup().\
#                 # add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))#–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ callback_data –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–¥ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
#                  add(InlineKeyboardButton( f'{ret[0]} {ret[-1]}', callback_data=f'del {ret[1]}')))        

# other.register_handlers_other(dp)
   #–ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê –ù–ê –ö–û–ù–ö–†–ï–¢–ù–û–ï –°–ú–°
    #  if message.text == '–ü—Ä–∏–≤–µ—Ç':
    #      await message.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!')

    #await message.answer(message.text)#await-–ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    #await message.reply(message.text)#"–æ—Ç–≤–µ—Ç–∏—Ç—å" –Ω–∞ —Å–º—Å
    # await bot.send_message(message.from_user.id,message.text )#"–æ—Ç–≤–µ—Ç–∏—Ç—å" –≤ –ª—Å

#–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ Technical_SupportLC_Bot
def register_handlers_client(dp : Dispatcher):
    #—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    dp.register_message_handler(commands_start, commands=['start','help'])
    # dp.register_message_handler(pizza_open_command, commands=['–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É'])
    # dp.register_message_handler(pizza_place_command, commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
    # dp.register_message_handler(checkstaff, commands=['–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ü–µ–Ω–∫—É'])