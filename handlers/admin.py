from cgitb import text
from aiogram.dispatcher import FSMContext #–±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from data_base import sqlite_db
from keyboards import admin_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ID = None #–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 0

class FSMAdmin(StatesGroup):
    name = State() #State - –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    lastname = State()
    # description = State()
    # price = State()


#–ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
# @dp.message_handler(commands=['moderator'], is_chat_admin=True)#moderator-–∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
async def make_change_command(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Ç, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä! üëãüèª \r\n' 
                                                '–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=admin_kb.button_case_admin)
    await message.delete()

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
# @dp.message_handler(commands='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None)#—Å–Ω–∞—á–∞–ª–∞ –±–æ—Ç –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –º–∞—à–∏–Ω–æ—Å–æ—Å—Ç–æ—è–Ω–∏–π
# async def cm_start(message : types.Message):
#     if message.from_user.id == ID:
#         await FSMAdmin.photo.set() #–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –º–∞—à–∏–Ω–æ—Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
#         await message.reply('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ')

async def cm_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.name.set()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
        await message.reply('–í–≤–µ–¥–∏ –∏–º—è:')   

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# @dp.message_handler(state="*", commands='–û—Ç–º–µ–Ω–∞')#state="*"-–ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,–Ω–∞–∑–≤–∞–Ω–∏–µ
# @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞',ignore_case=True), state="*")#ignore_case-–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
async def cancel_handler(message: types.Message, state:FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()#–ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        if current_state is None:#–µ—Å–ª–∏ –±–æ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            return
        await state.finish()#–∑–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—à–∏–Ω—É—Å–æ—Å—Ç–æ—è–Ω–∏–π
        await message.reply('OK')

#–õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(content_types=['photo'], state=FSMAdmin.photo) #state=FSMAdmin.photo-–±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥–µ—Ç 1st –æ—Ç–≤–µ—Ç –æ—Ç user
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            data['name'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ
        await FSMAdmin.next()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
        await message.reply("–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é:")

#–õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.name) #
# async def load_name(message: types.Message, state: FSMContext):
#     if message.from_user.id == ID:
#         async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#             data['lastname'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
#         await FSMAdmin.next()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
#         await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")    

#–õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.description) #
# async def load_description(message: types.Message, state: FSMContext):
#     if message.from_user.id == ID:
#         async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#             data['description'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
#         await FSMAdmin.next()#–ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ next state
#         await message.reply("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–Ω—É")  

#–õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
# @dp.message_handler(state=FSMAdmin.price) 
async def load_lastname(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            data['lastname'] = message.text #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        await sqlite_db.sql_add_command(state)
        await state.finish()#–±–æ—Ç –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –º–∞—à–∏–Ω–æ—Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å

#q —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))#–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 'del '
async def del_callback_run(callback_query: types.CallbackQuery):#callback_query-–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        await sqlite_db.sql_delete_command(callback_query.data.replace("del ", ""))#–∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
        await callback_query.answer(text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω.', show_alert=True)#–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω

@dp.message_handler(commands='–£–¥–∞–ª–∏—Ç—å')
async def delete_item(message:types.Message):
    read = await sqlite_db.sql_read2()#—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (sqlite_db)
    keyboard = types.InlineKeyboardMarkup()
    if message.from_user.id == ID:
        for ret in read:#–ø–æ –ø–æ–ª—É—á–∏–≤—à–µ–º—É—Å—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ö–æ–¥–∏–º
            # await bot.send_message(message.from_user.id, f'{ret[0]}\n–ò–º—è: {ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
            keyboard.add(types.InlineKeyboardButton( f'{ret[0]} {ret[-1]}', callback_data=f'del {ret[1]}'))
        await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=keyboard)
                # add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))#–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ callback_data –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–¥ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ


#–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers_admin(dp : Dispatcher):
    dp.register_message_handler(cm_start, commands=['–ó–∞–≥—Ä—É–∑–∏—Ç—å'], state=None)
    dp.register_message_handler(cancel_handler, state="*", commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞',ignore_case=True), state="*") 
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    # dp.register_message_handler(load_name, state=FSMAdmin.name)
    # dp.register_message_handler(load_description, state=FSMAdmin.description)
    dp.register_message_handler(load_lastname, state=FSMAdmin.lastname)   
    dp.register_message_handler(make_change_command, commands=['moderator'], is_chat_admin=True )
    # dp.register_message_handler(del_callback_run, lambda x: x.data and x.data.startwith('del ')) 
    # dp.register_message_handler(delete_item, commands=['–£–¥–∞–ª–∏—Ç—å'])  

